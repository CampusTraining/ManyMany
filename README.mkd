ManyMany
====

A Yii app for experimenting with complex grid views
----

The app shows four ways of implementing the loading of related data in a gridview.

All gridviews have working implementations of paging, sorting and filtering.

1. **UseCase One**: Only primary data is loaded with the DataProvider, related data is Lazy loaded.
2. **UseCase Two**: Related data is loaded using a GROUP_CONCAT query. This is the most data efficient way, but you can't do any manipulation using the join-model or related-model.
3. **UseCase Three**: You normally can't use Yii's Eager Loading method in gridviews in combination with a pager. (If you don't use the pager, you can Eager load without problems.) The reason why it won't work with the pager is because the pager adds LIMIT and OFFSET to the query, but those are static. In combination with JOIN statements, this becomes a problem. I made some changes to CActiveFinder so the correct LIMIT and OFFSET numbers are calculated using two seperate COUNT queries. This will enable you to use Yii's Eager loading without any problems.
4. **UseCase Four - KeenLoading**: This method uses a custom KeenActiveDataProvider, which loads all related data in a Keen way using a seperate query.

With these four methods, it might be hard to choose which one to use. Here are some considerations:

1. **UseCase One**
    Pro: Default Yii lazy loading
    Con: A lot of queries(!)

2. **UseCase Two**
    - Pro: Most data efficient
    - Pro: Only one query
    - Con: No manipulation of data of the related Model(s)

3. **UseCase Three**
    - Pro: Default Yii eager loading
    - Neutral: Up to two extra COUNT queries. (For a max of three queries)
    - Con: Like all eager loading, this can become data inefficient

4. **KeenLoading**
    - Pro: Able to manipulate data of the related Model(s)
    - Pro: Still very efficient
    - Neutral: One extra query for loading the related Model(s)


song/reviews is fully implemented with sorting, filtering and gridview paging

**I implemented four ways of loading the Genre(Has Many relation) data:**

1. *Review::search()* - You group the primary/foreign keys of Review, and set together to true. You don't select any data from Genre, because its lazy loaded for each row.
2. *Review::search2()* - Same as above, but you select a GROUP_CONCAT of the data from Genre. Most efficient eager loading.
3. *Review::search3()* - Using classMap you import a custom CActiveFinder that enhances the eager loading magic of Yii. Easiest, but the disadvantage is that is does another 2 COUNT queries for the pager to work.
4. *Song::search()* - Related data is loaded in a keen fashion. Using KeenActiveDataProvider, the related models are loaded in a seperate query and then put into the relation properties of the earlier loaded models.
