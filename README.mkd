ManyMany
====

A Yii app for experimenting with complex grid views
----

The app shows four ways of implementing the loading of related data in a gridview.

All gridviews have working implementations of paging, sorting and filtering.

1. **[UseCase One](#usecase-one---lazy-loading)**: Only primary data is loaded with the `CActiveDataProvider`, related data is Lazy loaded.
2. **[UseCase Two](#usecase-two---group_concat)**: Related data is loaded using a GROUP_CONCAT query. This is the most data efficient way, but you can't do any manipulation using the join-model or related-model.
3. **[UseCase Three](#usecase-two---group_concat)**: You normally can't use Yii's Eager Loading method in gridviews in combination with a pager. (If you don't use the pager, you can Eager load without problems.)   
 The reason why it won't work with the pager is because the pager adds LIMIT and OFFSET to the query, but those are static. In combination with JOIN statements, this becomes a problem. I made some changes to _CActiveFinder_ so the correct LIMIT and OFFSET numbers are calculated using two seperate COUNT queries. This will enable you to use Yii's Eager loading without any problems.
4. **[UseCase Four](#usecase-four---keenloading) - KeenLoading**: This method uses a custom `KeenActiveDataProvider`, which loads all related data in a Keen way using a seperate query.

With these four methods, it might be hard to choose which one to use. Here are some considerations:

1. **UseCase One**  
    Pro: Default Yii lazy loading  
    Con: A lot of queries(!)

2. **UseCase Two**  
    Pro: Most data efficient  
    Pro: Only one query  
    Con: No manipulation of data of the related Model(s)

3. **UseCase Three**  
    Pro: Default Yii eager loading  
    Neutral: Up to two extra COUNT queries. (For a max of three queries)  
    Con: Like all eager loading, this can become data inefficient

4. **KeenLoading**  
    Pro: Able to manipulate data of the related Model(s)  
    Pro: Still very efficient  
    Neutral: One extra query for loading the related Model(s)  

---

### CGridView: Paging, Sorting and Filtering

_[to be added]_  



---

### UseCase One - Lazy Loading

**Files/Methods**
- models/Review::searchOne()
- controllers/ReviewController::actionCaseOne()
- views/review/caseOne
- views/review/_caseOneGrid

**Explenation**  
You group the primary keys of Review, and set together to true. You don't select any data from Genre, because then its lazy loaded for each row.  
Because you're grouping the primary keys, the database returns only one row for each primary Model. This is why the pager doesn't break even though you set `$criteria->together` to `true`.  
Additionally, make sure to set the relations in `$criteria->with` that are lazy loaded to `array('select'=>false)`. This is more efficient since you're loading this data in a lazy way, so you don't need it in the first `SELECT` that the `CActiveDataProvider` performs..  

---
### UseCase Two - GROUP_CONCAT

**Files/Methods**
- models/Review::searchTwo()
- controllers/ReviewController::actionCaseTwo()
- views/review/caseTwo
- views/review/_caseTwoGrid

**Explenation**  
Same as the explenation of UseCase One. In addition:  
You set a `$criteria->select`, that selects a GROUP_CONCAT of the data from Genre. Don't forget to set the attributes of the main Model here or else those aren't loaded. Note that you don't have to include the primary keys in this select statement. Those are automatically added by Yii.  
An example:  
```php
<?php
    $criteria->select = array(
        //This attribute (allGenres) has to be added in the Model as a public property!
        'GROUP_CONCAT(genres.name ORDER BY genres.name SEPARATOR \', \') AS allGenres', 
        't.review',
   );
```
_Note: In addition, you can look at _caseTwoGrid.php to see how you can use a dropDownList in a gridview filter to search for a genre._  

---
### UseCase Three - Custom CActiveFinder

**Files/Methods**
- extensions/classMap/CActiveFinder
- /index.php
- models/Review::searchThree()
- controllers/ReviewController::actionCaseThree()
- views/review/caseThree
- views/review/_caseThreeGrid

**Explenation**  
Using classMap you import a custom CActiveFinder that enhances the eager loading magic of Yii. Easiest, but the disadvantage is that it does another 2 COUNT queries for the pager to work. Like the normal Eager loading way of Yii, this can become data inefficient in some cases.  
The extra COUNT queries will only be performed when:
1. the primary table is joined with HAS_MANY or MANY_MANY relations
2. Columns of those relations are selected
3. $criteria->group has been set
4. $criteria->together has been set to true  

---
### UseCase Four - KeenLoading

**Files/Methods**
- components/KeenActiveDataProvider
- models/Song::search()
- controllers/SongController::actionSongs()
- controllers/SongController::setSearchInputs()
- views/song/songsGrid
- views/song/_songsGrid

**Explenation**  
Related data is loaded in a keen fashion. Using KeenActiveDataProvider, the related models are loaded in a seperate query and then put into the relation properties of the earlier loaded models.  
In your Models search function, you return a new KeenActiveDataProvider, instead of a CActiveDataProvider. The KeenActiveDataProvider has another option named 'withKeenLoading', where you can set the relations that you want to load in a second(or multiple) queries.
An example:
```php
<?php
    return new KeenActiveDataProvider($this, array(
		'criteria' => $criteria,
		'withKeenLoading' => array('hasGenres.genre'),
	));
```
_Note: In addition, you can look at Song::search() to see how you can enable the gridviews filter to search for multiple Genres using a comma or space in the input field._  


---
###Extra: Full explenation of KeenActiveDataProvider
KeenActiveDataProvider implements a data provider based on ActiveRecord and is extended from CActiveDataProvider.

KeenActiveDataProvider provides data in terms of ActiveRecord objects. It uses 
the `CActiveRecord::findAll` method to retrieve the data from database. 
The criteria property can be used to specify various query options. If 
you add a 'with' option to the criteria, and the same relations are added to the 
'withKeenLoading' option, they will be automatically set to select no columns.  
ie. `array('author'=>array('select'=>false)`

There will be a `CDbCriteria->group` set automatically, that groups the model
to its own primary keys.

The relation names you specify in the 'withKeenLoading' property of the 
configuration array will be loaded in a keen fashion. A seperate database
query will be done to pull the data of those specified related models.

For example,
```php
<?php
    $dataProvider=new KeenActiveDataProvider('Post', array(
        'criteria'=>array(
            'condition'=>'status=1',
            'with'=>array('author'),
        ),
        'pagination'=>array(
            'pageSize'=>20,
        ),
        'withKeenLoading'=>array(
            'author',
            'comments'=>array('condition'=>'approved=1', 'order'=>'create_time'),
        )
));
```

The property withKeenLoading can be set as a string with comma seperated relation names, 
or an array. The array keys are relation names, and the array values are 
the corresponding query options.

In some cases, you don't want all relations to be Keenly loaded in a single
query because of data efficiency. In that case, you can group relations in multiple queries
using a multidimensional array. (Arrays inside an array.) Each array will 
be keenly loaded in a seperate query.
Example:
```php
<?php
    'withKeenLoading'=>array(
        array('relationA','relationB'),
        array('relationC')
    )
```
